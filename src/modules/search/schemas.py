from inspect import cleandoc
from typing import Literal, Annotated, TypeAlias

from pydantic import ConfigDict, Discriminator

from src.custom_pydantic import CustomModel


class PdfLocation(CustomModel):
    page_index: int
    "Page index in the PDF file. Starts from 1."


class MoodleSource(CustomModel):
    type: Literal["moodle"] = "moodle"
    course_id: int
    "Course ID in the Moodle system."
    course_name: str
    "Course name in the Moodle system."
    module_id: int
    "Module ID in the Moodle system (resources)."
    module_name: str
    "Module name in the Moodle system."
    display_name: str
    "Display name of the resource."
    resource_type: Literal["pdf"]
    "Type of the resource."
    anchor_url: str
    "Anchor URL to the resource."
    resource_preview_url: str | None = None
    "URL to get the preview of the resource."
    preview_location: PdfLocation | None = None


class TelegramSource(CustomModel):
    type: Literal["telegram"] = "telegram"
    chat_username: str
    "Username of the chat, channel, group"
    chat_title: str
    "Title of the chat, channel, group"
    message_id: int
    "Message ID in the chat"
    link: str
    "Link to the message"


Sources: TypeAlias = Annotated[MoodleSource | TelegramSource, Discriminator("type")]


class SearchResponse(CustomModel):
    markdown_text: str
    "Answer generated by LLM to the search query. Markdown format with html tags."
    sources: list[Sources]
    "Relevant sources for the search."
    score: float | None = None
    "Score of the search response. Optional."


def _example() -> dict:
    md_text = cleandoc(
        """
        # Computer Architecture. Week 2

        ### Content of the Class:

        - The role of performance characteristics and their relation to computer speed
        - The measurement of performance characteristics
        - Decision-making based on various performance metrics
        - Programs to determine comprehensive performance indexes
        """
    )

    return dict(
        searched_for="computer architecture",
        responses=[
            dict(
                markdown_text=md_text,
                sources=[
                    dict(
                        type="moodle",
                        course_id=1114,
                        course_name="[F22] Fundamentals of Computer Architecture",
                        module_id=82752,
                        module_name="Week 01 - 01 August 2022",
                        data_id=82752,
                        display_name="Lecture 2 Slides",
                        resource_type="pdf",
                        resource_download_url="https://ontheline.trincoll.edu/images/bookdown/sample-local-pdf.pdf",
                        resource_preview_url="https://ontheline.trincoll.edu/images/bookdown/sample-local-pdf.pdf",
                        preview_location=dict(page_index=1),
                    ),
                    dict(
                        type="telegram",
                        chat_username="one_zero_eight",
                        chat_title="one-zero-eight â€“ 108",
                        message_id=63,
                        link="https://t.me/one_zero_eight/63",
                    ),
                ],
            )
        ],
    )


class SearchResponses(CustomModel):
    searched_for: str
    "Text that was searched for."
    responses: list[SearchResponse]
    "Responses to the search query."

    model_config = ConfigDict(json_schema_extra={"examples": [_example()]})
